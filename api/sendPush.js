const dotenv = require('dotenv');
const webpush = require('web-push');
const { createClient } = require('@supabase/supabase-js');

if (process.env.NODE_ENV !== "production") {
  dotenv.config();
}

console.log("üì® sendPush.js a √©t√© ex√©cut√© !");

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Configuration des cl√©s VAPID
webpush.setVapidDetails(
  'mailto:infos@jhd71.fr',
  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY,
  process.env.VAPID_PRIVATE_KEY
);

// Fonction utilitaire pour envoyer une notification avec retry
async function sendNotificationWithRetry(subscription, payload, maxRetries = 2) {
  for (let i = 0; i <= maxRetries; i++) {
    try {
      await webpush.sendNotification(subscription, JSON.stringify(payload));
      return true;
    } catch (error) {
      if (error.statusCode === 410) {
        console.log('üîÑ Maintenance: Souscription √† renouveler');
        throw error;
      }
      if (i === maxRetries) {
        console.log('üìù Info: Tentatives de notification √©puis√©es');
        throw error;
      }
      console.log(`üîÑ Nouvelle tentative ${i + 1}/${maxRetries}`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  return false;
}

// Fonction pour nettoyer les souscriptions expir√©es
async function cleanExpiredSubscriptions() {
  try {
    console.log('üîÑ D√©but maintenance des souscriptions...');

    const { data: subscriptions, error } = await supabase
      .from('push_subscriptions')
      .select('*')
      .eq('active', true);

    if (error) {
      console.log('‚ÑπÔ∏è Pas de souscriptions √† maintenir');
      return;
    }

    console.log(`üìù V√©rification de ${subscriptions?.length || 0} souscriptions`);

    for (const sub of subscriptions || []) {
      try {
        const parsedSubscription = typeof sub.subscription === 'string'
          ? JSON.parse(sub.subscription)
          : sub.subscription;

        await webpush.sendNotification(
          parsedSubscription,
          JSON.stringify({ type: 'ping', timestamp: Date.now() })
        );

        console.log(`‚úÖ Souscription OK: ${sub.pseudo}`);
      } catch (error) {
        if (error.statusCode === 410) {
          console.log(`üîÑ Maintenance pour ${sub.pseudo}: renouvellement n√©cessaire`);
          
          await supabase
            .from('push_subscriptions')
            .delete()
            .match({
              pseudo: sub.pseudo,
              subscription: sub.subscription
            });

          await supabase
            .from('push_notification_log')
            .insert({
              from_user: 'system',
              to_user: sub.pseudo,
              status: 'maintenance',
              error_message: `Renouvellement planifi√©`,
              subscription: sub.subscription,
              device_type: sub.device_type || 'unknown'
            });
        } else {
          console.log(`‚ÑπÔ∏è Info ${sub.pseudo}: notification temporairement indisponible`);
        }
      }
    }
    console.log('‚úÖ Maintenance termin√©e');
  } catch (error) {
    console.log('‚ÑπÔ∏è Maintenance report√©e');
  }
}

// Handler principal de l'API
module.exports = async function handler(req, res) {
  try {
    // V√©rifier si req.body est d√©fini et contient les donn√©es requises
    const { message, fromUser, toUser } = req.body || {};
    if (!message || !fromUser || !toUser) {
      console.error("‚ö†Ô∏è Corps de requ√™te incomplet :", req.body);
      return res.status(400).json({ error: "Les champs 'message', 'fromUser' et 'toUser' sont obligatoires." });
    }

    console.log('üì© Donn√©es re√ßues:', { message, fromUser, toUser });

    // V√©rifier les souscriptions de l'utilisateur
    const { data: subscriptions, error: supabaseError } = await supabase
  .from('push_subscriptions')
  .select('subscription, device_type')
  .or(`pseudo.eq.${toUser},pseudo.eq.all`)
  .eq('active', true);

    console.log("üîç Souscriptions trouv√©es :", subscriptions);

    if (supabaseError) {
      console.log('‚ö†Ô∏è Erreur Supabase :', supabaseError);
      throw supabaseError;
    }

    if (!subscriptions || subscriptions.length === 0) {
      console.log(`üõë Aucune souscription trouv√©e pour ${toUser}`);

      await supabase
        .from('push_subscriptions')
        .delete()
        .eq('pseudo', toUser);

      console.log(`üóëÔ∏è Suppression de la souscription expir√©e pour ${toUser}`);
      return res.status(404).json({ error: 'No subscription found' });
    }

    // Envoi des notifications aux abonn√©s
    const notifications = await Promise.all(
      subscriptions.map(async ({ subscription }) => {
        try {
          const parsedSubscription = typeof subscription === 'string'
            ? JSON.parse(subscription)
            : subscription;

          await sendNotificationWithRetry(
            parsedSubscription,
            { title: `Nouveau message de ${fromUser}`, body: message }
          );

          return { success: true };
        } catch (error) {
          console.log(`‚ùå Erreur d'envoi pour ${toUser}:`, error.message);
          return { success: false, error: error.message };
        }
      })
    );

    // Compter les succ√®s et les erreurs
    const successful = notifications.filter(r => r.success).length;
    const errors = notifications.filter(r => !r.success);

    console.log('üìä Bilan des notifications:', {
      '‚úÖ Envoy√©es': successful,
      '‚ùå √âchecs': errors.length,
      'üì± Total abonn√©s': subscriptions.length
    });

    return res.status(200).json({
      success: true,
      sent: successful,
      total: subscriptions.length,
      errors: errors.map(e => e.error)
    });

  } catch (error) {
    console.log('‚ö†Ô∏è Erreur interne :', error.message);
    return res.status(500).json({ error: "Erreur interne du serveur" });
  }
};
